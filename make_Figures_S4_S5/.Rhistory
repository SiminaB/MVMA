S1 <- bdiag(matrix(runif(4),2,2), matrix(runif(4),2,2))
S1 <- as.matrix(S1)
diag(S1) <- 1
S1 <- (S1+t(S1))/2
S2 <- bdiag(matrix(runif(4),2,2), matrix(runif(4),2,2))
S2 <- as.matrix(S2)
diag(S2) <- 1
S2 <- (S2+t(S2))/2
V1 <- diag(c(0.2,0.4,0.6,0.8))
V2 <- diag(c(0.1,0.3,0.5,0.7))
S1 <- sqrt(V1) %*% S1 %*% sqrt(V1)
S2 <- sqrt(V2) %*% S2 %*% sqrt(V2)
U1 <- diag(diag(S1))
U2 <- diag(diag(S2))
MVMA4 <- solve(solve(S1)+solve(S2))
UVMA4 <- solve(solve(U1)+solve(U2)) %*%
(solve(U1) %*% S1 %*% solve(U1) + solve(U2) %*% S2 %*% solve(U2)) %*%
solve(solve(U1)+solve(U2))
U1a <- diag(diag(S1a))
U1b <- diag(diag(S1b))
U2a <- diag(diag(S2a))
U2b <- diag(diag(S2b))
S1a <- S1[1:2, 1:2]
S1b <- S1[3:4, 3:4]
S2a <- S2[1:2, 1:2]
S2b <- S2[3:4, 3:4]
MVMA2a <- solve(solve(S1a)+solve(S2a))
UVMA2a <- solve(solve(U1a)+solve(U2a)) %*%
(solve(U1a) %*% S1a %*% solve(U1a) + solve(U2a) %*% S2a %*% solve(U2a)) %*%
solve(solve(U1a)+solve(U2a))
MVMA2b <- solve(solve(S1b)+solve(S2b))
UVMA2b <- solve(solve(U1b)+solve(U2b)) %*%
(solve(U1b) %*% S1b %*% solve(U1b) + solve(U2b) %*% S2b %*% solve(U2b)) %*%
solve(solve(U1b)+solve(U2b))
diag(MVMA4)/diag(UVMA4)
diag(MVMA2a)/diag(UVMA2a)
diag(MVMA2b)/diag(UVMA2b)
S1 <- bdiag(matrix(runif(4),2,2), matrix(runif(4),2,2))
S1 <- as.matrix(S1)
diag(S1) <- 1
S1 <- (S1+t(S1))/2
S2 <- bdiag(matrix(runif(4),2,2), matrix(runif(4),2,2))
S2 <- as.matrix(S2)
diag(S2) <- 1
S2 <- (S2+t(S2))/2
V1 <- diag(c(0.2,0.4,0.6,0.8))
V2 <- diag(c(0.1,0.3,0.5,0.7))
S1 <- sqrt(V1) %*% S1 %*% sqrt(V1)
S2 <- sqrt(V2) %*% S2 %*% sqrt(V2)
U1 <- diag(diag(S1))
U2 <- diag(diag(S2))
MVMA4 <- solve(solve(S1)+solve(S2))
UVMA4 <- solve(solve(U1)+solve(U2)) %*%
(solve(U1) %*% S1 %*% solve(U1) + solve(U2) %*% S2 %*% solve(U2)) %*%
solve(solve(U1)+solve(U2))
U1a <- diag(diag(S1a))
U1b <- diag(diag(S1b))
U2a <- diag(diag(S2a))
U2b <- diag(diag(S2b))
S1a <- S1[1:2, 1:2]
S1b <- S1[3:4, 3:4]
S2a <- S2[1:2, 1:2]
S2b <- S2[3:4, 3:4]
MVMA2a <- solve(solve(S1a)+solve(S2a))
UVMA2a <- solve(solve(U1a)+solve(U2a)) %*%
(solve(U1a) %*% S1a %*% solve(U1a) + solve(U2a) %*% S2a %*% solve(U2a)) %*%
solve(solve(U1a)+solve(U2a))
MVMA2b <- solve(solve(S1b)+solve(S2b))
UVMA2b <- solve(solve(U1b)+solve(U2b)) %*%
(solve(U1b) %*% S1b %*% solve(U1b) + solve(U2b) %*% S2b %*% solve(U2b)) %*%
solve(solve(U1b)+solve(U2b))
diag(MVMA4)/diag(UVMA4)
diag(MVMA2a)/diag(UVMA2a)
diag(MVMA2b)/diag(UVMA2b)
S1 <- bdiag(matrix(runif(4),2,2), matrix(runif(4),2,2))
S1 <- as.matrix(S1)
diag(S1) <- 1
S1 <- (S1+t(S1))/2
S2 <- bdiag(matrix(runif(4),2,2), matrix(runif(4),2,2))
S2 <- as.matrix(S2)
diag(S2) <- 1
S2 <- (S2+t(S2))/2
V1 <- diag(c(0.2,0.4,0.6,0.8))
V2 <- diag(c(0.1,0.3,0.5,0.7))
S1 <- sqrt(V1) %*% S1 %*% sqrt(V1)
S2 <- sqrt(V2) %*% S2 %*% sqrt(V2)
U1 <- diag(diag(S1))
U2 <- diag(diag(S2))
MVMA4 <- solve(solve(S1)+solve(S2))
UVMA4 <- solve(solve(U1)+solve(U2)) %*%
(solve(U1) %*% S1 %*% solve(U1) + solve(U2) %*% S2 %*% solve(U2)) %*%
solve(solve(U1)+solve(U2))
U1a <- diag(diag(S1a))
U1b <- diag(diag(S1b))
U2a <- diag(diag(S2a))
U2b <- diag(diag(S2b))
S1a <- S1[1:2, 1:2]
S1b <- S1[3:4, 3:4]
S2a <- S2[1:2, 1:2]
S2b <- S2[3:4, 3:4]
MVMA2a <- solve(solve(S1a)+solve(S2a))
UVMA2a <- solve(solve(U1a)+solve(U2a)) %*%
(solve(U1a) %*% S1a %*% solve(U1a) + solve(U2a) %*% S2a %*% solve(U2a)) %*%
solve(solve(U1a)+solve(U2a))
MVMA2b <- solve(solve(S1b)+solve(S2b))
UVMA2b <- solve(solve(U1b)+solve(U2b)) %*%
(solve(U1b) %*% S1b %*% solve(U1b) + solve(U2b) %*% S2b %*% solve(U2b)) %*%
solve(solve(U1b)+solve(U2b))
diag(MVMA4)/diag(UVMA4)
diag(MVMA2a)/diag(UVMA2a)
diag(MVMA2b)/diag(UVMA2b)
S1 <- bdiag(matrix(runif(4,0,0.5),2,2), matrix(runif(4),2,2))
S1 <- as.matrix(S1)
diag(S1) <- 1
S1 <- (S1+t(S1))/2
S2 <- bdiag(matrix(runif(4,0,0.5),2,2), matrix(runif(4),2,2))
S2 <- as.matrix(S2)
diag(S2) <- 1
S2 <- (S2+t(S2))/2
V1 <- diag(c(0.2,0.4,0.6,0.8))
V2 <- diag(c(0.1,0.3,0.5,0.7))
S1 <- sqrt(V1) %*% S1 %*% sqrt(V1)
S2 <- sqrt(V2) %*% S2 %*% sqrt(V2)
U1 <- diag(diag(S1))
U2 <- diag(diag(S2))
MVMA4 <- solve(solve(S1)+solve(S2))
UVMA4 <- solve(solve(U1)+solve(U2)) %*%
(solve(U1) %*% S1 %*% solve(U1) + solve(U2) %*% S2 %*% solve(U2)) %*%
solve(solve(U1)+solve(U2))
U1a <- diag(diag(S1a))
U1b <- diag(diag(S1b))
U2a <- diag(diag(S2a))
U2b <- diag(diag(S2b))
S1a <- S1[1:2, 1:2]
S1b <- S1[3:4, 3:4]
S2a <- S2[1:2, 1:2]
S2b <- S2[3:4, 3:4]
MVMA2a <- solve(solve(S1a)+solve(S2a))
UVMA2a <- solve(solve(U1a)+solve(U2a)) %*%
(solve(U1a) %*% S1a %*% solve(U1a) + solve(U2a) %*% S2a %*% solve(U2a)) %*%
solve(solve(U1a)+solve(U2a))
MVMA2b <- solve(solve(S1b)+solve(S2b))
UVMA2b <- solve(solve(U1b)+solve(U2b)) %*%
(solve(U1b) %*% S1b %*% solve(U1b) + solve(U2b) %*% S2b %*% solve(U2b)) %*%
solve(solve(U1b)+solve(U2b))
diag(MVMA4)/diag(UVMA4)
diag(MVMA2a)/diag(UVMA2a)
diag(MVMA2b)/diag(UVMA2b)
S1 <- r*ARMAcor(phi=rho1, rho=1, n=p)
S1
S1 <- S2 <- diag(rep(1,p))
S1
S1 <- r*S1
S2 <- (1-r)*S2
setwd("~/GitHub/MVMA/make_Figures_S4_S5")
library(ggplot2)
library(clusterGeneration)
source("functions.R")
@
Load the files representing the summary for each scenario and save the results in a single dataframe, \textttt{VarsAll}:
<<combComb, include=TRUE>>=
allFiles <- list.files("simResultsComb")
##save the three Vars for the different combinations
VarsAll <- expand.grid(p = c(5,10,15,20),
randVar = 1:5,
het = c(0.2, 1, 5),
sampleType = c("same", "diff"),
I = c(10,20))
VarsAll$known <- VarsAll$unknown <- VarsAll$univKnown <- VarsAll$univ <-
VarsAll$knownEmpWithin <- VarsAll$univKnownEmpWithin <- NA
for(file in 1:length(allFiles))
{
load(paste("simResultsComb", allFiles[file], sep="/"))
rowNr <- gsub("combine_cost_of_estimation_post_SIM", "", allFiles[file])
rowNr <- gsub(".RData", "", rowNr)
rowNr <- as.numeric(rowNr)
VarsAll[rowNr, c("p","randVar","het","sampleType","I",
"univ","univKnown",
"unknown","known")] <-
Vars[rowNr, c("p","randVar","het","sampleType","I",
"univ","univKnown",
"unknown","known")]
##get number of studies, number of parameters, scenario number, etc
p <- VarsAll[rowNr, "p"]
randVar <- VarsAll[rowNr, "randVar"]
het <- VarsAll[rowNr, "het"]
sampleType <- VarsAll[rowNr, "sampleType"]
I <- VarsAll[rowNr, "I"]
##get theoretical variances of multivariate and univariate estimators
varMult <- varUniv <- varUnivT1 <- varUnivT2 <- matrix(0, p, p)
##simulate Sigma again
##set.seed(381048+1940*randVar)
##Sigma <- cov2cor(genPositiveDefMat(p)$Sigma)*het
D <- diag(diag(Sigma))
for(site in 1:I)
{
##StudyEmpVars[[site]] <- StudyEmpVars[[site]] + Sigma
varMult <- varMult+solve(StudyEmpVars[[site]]+Sigma)
Uisite <- diag(diag(StudyEmpVars[[site]]))
varUnivT1 <- varUnivT1+solve(Uisite+D)
varUnivT2 <- varUnivT2+
solve(Uisite+D) %*% (StudyEmpVars[[site]]+Sigma) %*% solve(Uisite+D)
}
varMult <- solve(varMult)
varUnivT1 <- solve(varUnivT1)
varUniv <- varUnivT1 %*% varUnivT2 %*% varUnivT1
VarsAll[rowNr, c("knownEmpWithin","univKnownEmpWithin")] <-
c(varMult[1], varUniv[1])
}
VarsAll$Ratio <- VarsAll$known/VarsAll$unknown
VarsAll$RelEff <- VarsAll$unknown/VarsAll$univ
VarsAll$RelEffT <- VarsAll$known/VarsAll$univKnown
VarsAll$RelEffTAsympt <- VarsAll$knownEmpWithin/VarsAll$univKnownEmpWithin
range(VarsAll$Ratio)
@
<<>>=
##add a column that specifically gives the value of Sigma^2 (from het)
VarsAll$Sigma2 <- ""
VarsAll$Sigma2[VarsAll$het == 0.2] <- "Sigma^2 = 1/5"
VarsAll$Sigma2[VarsAll$het == 1] <- "Sigma^2 = 1"
VarsAll$Sigma2[VarsAll$het == 5] <- "Sigma^2 = 5"
VarsAll$Sigma2 <- factor(VarsAll$Sigma2,
levels= c("Sigma^2 = 1/5", "Sigma^2 = 1", "Sigma^2 = 5"))
VarsAllSame <- VarsAll[VarsAll$sampleType=="same",]
VarsAllDiff <- VarsAll[VarsAll$sampleType=="diff",]
##get the minimum value for Sigma^2 = 5
min(VarsAll$RelEff[VarsAll$Sigma2 == "Sigma^2 = 5"])
##change format so it's ggplot-friendly
RelEffSame <-
rbind(cbind(as.matrix(VarsAllSame[,c("p", "I", "randVar", "RelEff"),]),"RelEff"),
cbind(as.matrix(VarsAllSame[,c("p", "I", "randVar", "RelEffT"),]),"RelEffT"),
cbind(as.matrix(VarsAllSame[,c("p", "I", "randVar", "RelEffTAsympt"),]),"RelEffTAsympt"))
colnames(RelEffSame)[5] <- "Estimate"
RelEffSame <- as.data.frame(RelEffSame)
RelEffSame$Sigma2 <- factor(c(as.character(VarsAllSame$Sigma2), as.character(VarsAllSame$Sigma2),
as.character(VarsAllSame$Sigma2)),
levels = c("Sigma^2 = 1/5", "Sigma^2 = 1", "Sigma^2 = 5"))
RelEffSame$p <- as.numeric(as.character(RelEffSame$p))
RelEffSame$RelEff <- as.numeric(as.character(RelEffSame$RelEff))
##
RelEffDiff <-
rbind(cbind(as.matrix(VarsAllDiff[,c("p", "I", "randVar", "RelEff"),]),"RelEff"),
cbind(as.matrix(VarsAllDiff[,c("p", "I", "randVar", "RelEffT"),]),"RelEffT"),
cbind(as.matrix(VarsAllDiff[,c("p", "I", "randVar", "RelEffTAsympt"),]),"RelEffTAsympt"))
colnames(RelEffDiff)[5] <- "Estimate"
RelEffDiff <- as.data.frame(RelEffDiff)
RelEffDiff$Sigma2 <- factor(c(as.character(VarsAllDiff$Sigma2), as.character(VarsAllDiff$Sigma2),
as.character(VarsAllDiff$Sigma2)),
levels = c("Sigma^2 = 1/5", "Sigma^2 = 1", "Sigma^2 = 5"))
RelEffDiff$p <- as.numeric(as.character(RelEffDiff$p))
RelEffDiff$RelEff <- as.numeric(as.character(RelEffDiff$RelEff))
##take out the asymptotic relative efficiency
RelEffSame <- RelEffSame[RelEffSame$Estimate != "RelEffTAsympt",]
RelEffDiff <- RelEffDiff[RelEffDiff$Estimate != "RelEffTAsympt",]
@
\section{Make Figure S4}
<<Figure_S4_panel_a>>=
I_10_Same_Panel_A <- panelFigS4S5(I=10, subsetSigma2 = "Sigma^2 = 1/5", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(a)", paste("Random effects: ",
I, " = ", 10, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1/5, ", ",
"Equal sample sizes"))))
@
<<Figure_S4_panel_b>>=
I_10_Same_Panel_B <- panelFigS4S5(I=10, subsetSigma2 = "Sigma^2 = 1", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(b)", paste("Random effects: ",
I, " = ", 10, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1, ", ",
"Equal sample sizes"))))
@
<<Figure_S4_panel_c>>=
I_10_Same_Panel_C <- panelFigS4S5(I=10, subsetSigma2 = "Sigma^2 = 5", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(c)", paste("Random effects: ",
I, " = ", 10, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 5, ", ",
"Equal sample sizes"))))
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<Figure_S4_panel_d, fig.width=6, fig.height=5>>=
I_10_Diff_Panel_A <- panelFigS4S5(I=10, subsetSigma2 = "Sigma^2 = 1/5", RelEffSubs = RelEffDiff) +
labs(color="", shape="",
title=expression(atop("(d)", paste("Random effects: ",
I, " = ", 10, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1/5, ", ",
"Unequal sample sizes"))))
@
<<Figure_S4_panel_e>>=
I_10_Diff_Panel_B <- panelFigS4S5(I=10, subsetSigma2 = "Sigma^2 = 1", RelEffSubs = RelEffDiff) +
labs(color="", shape="",
title=expression(atop("(e)", paste("Random effects: ",
I, " = ", 10, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1, ", ",
"Unequal sample sizes"))))
@
<<Figure_S4_panel_f>>=
I_10_Diff_Panel_C <- panelFigS4S5(I=10, subsetSigma2 = "Sigma^2 = 5", RelEffSubs = RelEffDiff) +
labs(color="", shape="",
title=expression(atop("(f)", paste("Random effects: ",
I, " = ", 10, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 5, ", ",
"Unequal sample sizes"))))
@
Put all 6 panels together for Figure S4:
<<Boca_Figure_S4_panels, fig.width=18, fig.height=10>>=
multiplot(I_10_Same_Panel_A, I_10_Diff_Panel_A,
I_10_Same_Panel_B, I_10_Diff_Panel_B,
I_10_Same_Panel_C, I_10_Diff_Panel_C,
cols=3)
@
\section{Make Figure S5}
<<Figure_S5_panel_a>>=
I_20_Same_Panel_A <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 1/5", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(a)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1/5, ", ",
"Equal sample sizes"))))
I_20_Same_Panel_A <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 1/5", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(a)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1/5, ", ",
"Equal sample sizes"))))
I_20_Same_Panel_B <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 1", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(b)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1, ", ",
"Equal sample sizes"))))
I_20_Same_Panel_C <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 5", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(c)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 5, ", ",
"Equal sample sizes"))))
I_20_Diff_Panel_A <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 1/5", RelEffSubs = RelEffDiff) +
labs(color="", shape="",
title=expression(atop("(d)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1/5, ", ",
"Unequal sample sizes"))))
I_20_Diff_Panel_B <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 1", RelEffSubs = RelEffDiff) +
labs(color="", shape="",
title=expression(atop("(e)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1, ", ",
"Unequal sample sizes"))))
I_20_Diff_Panel_C <- panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 5", RelEffSubs = RelEffDiff) +
labs(color="", shape="",
title=expression(atop("(f)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 5, ", ",
"Unequal sample sizes"))))
multiplot(I_20_Same_Panel_A, I_20_Diff_Panel_A,
I_20_Same_Panel_B, I_20_Diff_Panel_B,
I_20_Same_Panel_C, I_20_Diff_Panel_C,
cols=3)
I_20_Same_Panel_A
panelFigS4S5(I=20, subsetSigma2 = "Sigma^2 = 1/5", RelEffSubs = RelEffSame) +
labs(color="", shape="",
title=expression(atop("(a)", paste("Random effects: ",
I, " = ", 20, ", ",
sigma^2/bar(S^2),  phantom() %~~% phantom() , 1/5, ", ",
"Equal sample sizes"))))
I=20
subsetSigma2 = "Sigma^2 = 1/5"
RelEffSubs = RelEffSame
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))+
theme_bw(base_size = 20)+
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 15, hjust=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
##scale_x_continuous(breaks=c(5,10,15,20)) +
legend.position = c(0.15,0.2),
axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
axis.line.y = element_line(color="black", size = 0.5)) +
guides(color=FALSE) + ##remove legend corresponding to color aesthetic
##scale_color_discrete(name = "Random scenario") +
scale_shape_discrete(name ="",
labels = c(expression(paste(RelEff)),
expression(paste(RelEff^T)))) +
ylim(0.75, 1)
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))+
theme_bw(base_size = 20)+
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 15, hjust=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
##scale_x_continuous(breaks=c(5,10,15,20)) +
legend.position = c(0.15,0.2),
axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
axis.line.y = element_line(color="black", size = 0.5))
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))+
theme_bw(base_size = 20)+
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 15, hjust=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
##scale_x_continuous(breaks=c(5,10,15,20)) +
legend.position = c(0.15,0.2),
axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
axis.line.y = element_line(color="black", size = 0.5)) +
guides(color=FALSE) + ##remove legend corresponding to color aesthetic
##scale_color_discrete(name = "Random scenario") +
scale_shape_discrete(name ="",
labels = c(expression(paste(RelEff)),
expression(paste(RelEff^T)))) +
ylim(0.75, 1)
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))+
theme_bw(base_size = 20)+
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 15, hjust=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
##scale_x_continuous(breaks=c(5,10,15,20)) +
legend.position = c(0.15,0.2),
axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
axis.line.y = element_line(color="black", size = 0.5)) +
guides(color=FALSE) + ##remove legend corresponding to color aesthetic
##scale_color_discrete(name = "Random scenario") +
scale_shape_discrete(name ="",
labels = c(expression(paste(RelEff)),
expression(paste(RelEff^T)))) +
ylim(0.70, 1)
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))+
theme_bw(base_size = 20)+
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 15, hjust=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
##scale_x_continuous(breaks=c(5,10,15,20)) +
legend.position = c(0.15,0.2),
axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
axis.line.y = element_line(color="black", size = 0.5)) +
guides(color=FALSE) + ##remove legend corresponding to color aesthetic
##scale_color_discrete(name = "Random scenario") +
scale_shape_discrete(name ="",
labels = c(expression(paste(RelEff)),
expression(paste(RelEff^T)))) +
ylim(0.72, 1)
ggplot(RelEffSubs[as.character(RelEffSubs$I) == as.character(I) &
as.character(RelEffSubs$Sigma2) == subsetSigma2,],
aes(x=p, y=RelEff))+
geom_point(size=3.0, aes(color=randVar, shape=Estimate))+
theme_bw(base_size = 20)+
theme(axis.line = element_line(colour = "black"),
plot.title = element_text(size = 15, hjust=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_blank(),
legend.text.align = 0,
##scale_x_continuous(breaks=c(5,10,15,20)) +
legend.position = c(0.15,0.2),
axis.line.x = element_line(color="black", size = 0.5), ##this is to show axes - bug in this version of ggplot2
axis.line.y = element_line(color="black", size = 0.5)) +
guides(color=FALSE) + ##remove legend corresponding to color aesthetic
##scale_color_discrete(name = "Random scenario") +
scale_shape_discrete(name ="",
labels = c(expression(paste(RelEff)),
expression(paste(RelEff^T)))) +
ylim(0.74, 1)
min(RelEffDiff)
min(RelEffDiff$RelEff)
